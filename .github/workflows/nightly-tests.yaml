name: Nightly tests

on:
  workflow_call: # Make workflow reusable
    inputs:
      learning_parameter_settings:
        required: false
        type: string
      enable_dev_dependencies:
        required: false
        type: string
    secrets:
      GETI_HOST:
        required: true
      GETI_USERNAME:
        required: true
      GETI_PASSWORD:
        required: true

env:
  # Login details for the Geti instance to run the tests against
  # Secrets are configured on repository level (Settings > Secrets)
  GETI_HOST: ${{ secrets.GETI_HOST }}
  GETI_USERNAME: ${{ secrets.GETI_USERNAME }}
  GETI_PASSWORD: ${{ secrets.GETI_PASSWORD }}

  # Other environment variables used in the tests
  TEST_MODE: "ONLINE"
  CLEAR_EXISTING_TEST_PROJECTS: 1
  LEARNING_PARAMETER_SETTINGS: ${{ inputs.learning_parameter_settings }}
  ENABLE_DEV_DEPENDENCIES: ${{ inputs.enable_dev_dependencies }}
  # Artifacts and test reports
  ARTIFACT_DIRECTORY: artifacts
  REPORT_DIRECTORY: reports

  # Conda environment
  CONDA_ENV: sc_sdk_nightly_test_environment
  PYTHON_VERSION: 3.9

permissions:
  contents: read

jobs:
  nightly_tests:
    runs-on: [self-hosted, sdk-runner]

    steps:

      - name: Harden Runner
        uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit

      - name: Checkout code with caching for Git LFS
        uses: nschloe/action-cached-lfs-checkout@b45b5731560fe7acf2d15c536bc8aef4f71c885e # v1.2.0

      - name: Create fresh conda environment
        # Steps: check if env named $CONDA_ENV exists, if so remove it. Create new env
        # using python version $PYTHON_VERSION
        run: |
          eval "$(conda shell.bash hook)"

          conda info --envs > temp_envs.txt

          if grep --quiet $CONDA_ENV temp_envs.txt; then
          echo Conda environment $CONDA_ENV exists, removing for clean start
          conda remove -y --name $CONDA_ENV --all
          fi

          rm temp_envs.txt

          conda create -y -n $CONDA_ENV python=$PYTHON_VERSION


      - name: Install package with dev requirements
        # Steps: Activate conda env, upgrade pip, install SDK
        run: |
          eval "$(conda shell.bash hook)"
          conda activate $CONDA_ENV

          python -m pip install --upgrade pip

          if [[ $ENABLE_DEV_DEPENDENCIES = 1 ]]; then
          pip install ".[dev]" --pre
          else
          pip install ".[dev]"
          fi

      - name: Create artifact directories
        # Creates the temporary directories that are used to store the test
        # artifacts and reports
        run: |
          mkdir $ARTIFACT_DIRECTORY
          mkdir $REPORT_DIRECTORY

      - name: Nightly tests
        # Proxy settings have to be configured and GETI_HOST set to full address before
        # tests can run
        #
        # NOTE: This step executes all tests in the `tests` directory in `ONLINE` mode
        run: |
          export no_proxy=$GETI_HOST,$no_proxy
          export NO_PROXY=$GETI_HOST,$NO_PROXY
          export GETI_HOST=https://$GETI_HOST

          eval "$(conda shell.bash hook)"
          conda activate $CONDA_ENV

          pytest tests --cov=geti_sdk --html=$REPORT_DIRECTORY/nightly_test_report.html --self-contained-html --cov-report html:$REPORT_DIRECTORY/coverage

      - name: Upload artifacts for nightly tests
        # Publish the test artifacts in the $ARTIFACT_DIRECTORY to github
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        if: ${{ always() }}
        with:
          name: artifacts
          path: ${{ env.ARTIFACT_DIRECTORY }}

      - name: Upload test reports
        # Publish the test reports to github
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        if: ${{ always() }}
        with:
          name: test-reports
          path: ${{ env.REPORT_DIRECTORY }}

      - name: Clean up artifact directories
        # Remove temporary artifact and report directories
        if: ${{ always() }}
        run: |
          rm -r $ARTIFACT_DIRECTORY
          rm -r $REPORT_DIRECTORY
